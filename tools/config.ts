import fs from 'fs';

import {
	devProdConfig
} from './util.js';

const generateConfig = () => {

	const config = devProdConfig();
	const projectConfig = config.prod;

	const APP_TITLE = projectConfig.app_title ? projectConfig.app_title : 'Cards Web';
	const APP_DESCRIPTION = projectConfig.app_description || APP_TITLE;
	const GOOGLE_ANALYTICS =  projectConfig.google_analytics || 'UA-321674-11';

	const TWITTER_HANDLE = projectConfig.twitter_handle || '';

	const OPENAI_API_KEY = projectConfig.openai_api_key || '';
	const OPENAI_ENABLED = OPENAI_API_KEY != '';

	const QDRANT_ENABLED = projectConfig.qdrant && OPENAI_ENABLED;

	const USER_TYPE_ALL_PERMISSIONS = projectConfig.permissions && projectConfig.permissions.all || {};
	const USER_TYPE_ANONYMOUS_PERMISSIONS = projectConfig.permissions && projectConfig.permissions.anonymous || {};
	const USER_TYPE_SIGNED_IN_PERMISSIONS = projectConfig.permissions && projectConfig.permissions.signed_in || {};
	const USER_TYPE_SIGNED_IN_DOMAIN_PERMISSIONS = projectConfig.permissions && projectConfig.permissions.signed_in_domain || {};

	const DISABLE_PERSISTENCE = projectConfig.disable_persistence || false;
	const DISABLE_ANONYMOUS_LOGIN = projectConfig.disable_anonymous_login || false;
	const DISABLE_SERVICE_WORKER = projectConfig.disable_service_worker || false;
	const DISABLE_CALLABLE_CLOUD_FUNCTIONS = projectConfig.disable_callable_cloud_functions || false;

	const TAB_CONFIGURATION = projectConfig.tabs || null;
	const TAB_OVERRIDES_CONFIGURATION = projectConfig.tab_overrides || null;

	const FIREBASE_REGION = projectConfig.region || 'us-central1';

	const USER_DOMAIN = projectConfig.user_domain || '';

	let CONFIG_JS_CONTENT = '// Generated by `npm run generate:config`\n';
	CONFIG_JS_CONTENT += 'import { FirebaseOptions } from \'firebase/app\';\n';
	CONFIG_JS_CONTENT += 'import { TabConfigInput, TabConfigOverrides, UserPermissionsCore } from \'./types_simple.js\';\n\n';
	CONFIG_JS_CONTENT += 'export const FIREBASE_DEV_CONFIG : FirebaseOptions = ' + JSON.stringify(config.dev.firebase).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const FIREBASE_PROD_CONFIG : FirebaseOptions = ' + JSON.stringify(config.prod.firebase).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const APP_TITLE = \'' + APP_TITLE + '\';\n';
	CONFIG_JS_CONTENT += 'export const USER_TYPE_ALL_PERMISSIONS : UserPermissionsCore = ' + JSON.stringify(USER_TYPE_ALL_PERMISSIONS).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const USER_TYPE_ANONYMOUS_PERMISSIONS : UserPermissionsCore = ' + JSON.stringify(USER_TYPE_ANONYMOUS_PERMISSIONS).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const USER_TYPE_SIGNED_IN_PERMISSIONS : UserPermissionsCore = ' + JSON.stringify(USER_TYPE_SIGNED_IN_PERMISSIONS).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const USER_TYPE_SIGNED_IN_DOMAIN_PERMISSIONS : UserPermissionsCore = ' + JSON.stringify(USER_TYPE_SIGNED_IN_DOMAIN_PERMISSIONS).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const USER_DOMAIN = \'' + USER_DOMAIN + '\';\n';
	CONFIG_JS_CONTENT += 'export const FIREBASE_REGION = \'' + FIREBASE_REGION + '\';\n';
	CONFIG_JS_CONTENT += 'export const TWITTER_HANDLE = \'' + TWITTER_HANDLE + '\';\n';
	CONFIG_JS_CONTENT += 'export const TAB_CONFIGURATION : TabConfigInput | null = ' + JSON.stringify(TAB_CONFIGURATION).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const TAB_OVERRIDES_CONFIGURATION : TabConfigOverrides | null = ' + JSON.stringify(TAB_OVERRIDES_CONFIGURATION).split('"').join('\'') + ';\n';
	CONFIG_JS_CONTENT += 'export const DISABLE_PERSISTENCE = ' + (DISABLE_PERSISTENCE ? 'true' : 'false') + ';\n';
	CONFIG_JS_CONTENT += 'export const DISABLE_ANONYMOUS_LOGIN = ' + (DISABLE_ANONYMOUS_LOGIN ? 'true' : 'false') + ';\n';
	CONFIG_JS_CONTENT += 'export const DISABLE_CALLABLE_CLOUD_FUNCTIONS = ' + (DISABLE_CALLABLE_CLOUD_FUNCTIONS ? 'true' : 'false') + ';\n';
	CONFIG_JS_CONTENT += 'export const OPENAI_ENABLED = ' + (OPENAI_ENABLED ? 'true' : 'false') + ';\n';
	CONFIG_JS_CONTENT += 'export const QDRANT_ENABLED = ' + (QDRANT_ENABLED ? 'true' : 'false') + ';\n';
	fs.writeFileSync('src/config.GENERATED.SECRET.ts', CONFIG_JS_CONTENT);

	let META_STRING = '';
	if (TWITTER_HANDLE) {
		META_STRING += '\n    <meta name="twitter:site" content="@' + TWITTER_HANDLE + '">';
	}

	let templateHTML = fs.readFileSync('index.TEMPLATE.html').toString();
	if (META_STRING)templateHTML = templateHTML.split('<!-- INJECT-META-HERE -->').join(META_STRING);
	templateHTML = templateHTML.split('@GOOGLE_ANALYTICS@').join(GOOGLE_ANALYTICS);
	templateHTML = templateHTML.split('@APP_TITLE@').join(APP_TITLE);
	if (DISABLE_SERVICE_WORKER) templateHTML = templateHTML.split('SERVICE-WORKER-START*/').join('SERVICE-WORKER-START*//*');
	fs.writeFileSync('index.PARTIAL.html', templateHTML);

	//We split this into two parts so build:seo can use the partial results that only need title and description changed.
	let templatePartialHTML = fs.readFileSync('index.PARTIAL.html').toString();
	templatePartialHTML = templatePartialHTML.split('@TITLE@').join(APP_TITLE);
	templatePartialHTML = templatePartialHTML.split('@DESCRIPTION@').join(APP_DESCRIPTION);
	fs.writeFileSync('index.html', templatePartialHTML);
	
	const COMPOSED_USER_TYPE_ALL_PERMISSIONS = {...USER_TYPE_ALL_PERMISSIONS};
	const COMPOSED_USER_TYPE_ANOYMOUS_PERMISSIONS = {...COMPOSED_USER_TYPE_ALL_PERMISSIONS, ...USER_TYPE_ANONYMOUS_PERMISSIONS};
	const COMPOSED_USER_TYPE_SIGNED_IN_PERMISSIONS = {...COMPOSED_USER_TYPE_ANOYMOUS_PERMISSIONS, ...USER_TYPE_SIGNED_IN_PERMISSIONS};
	const COMPOSED_USER_TYPE_SIGNED_IN_DOMAIN_PERMISSIONS = {...COMPOSED_USER_TYPE_SIGNED_IN_PERMISSIONS, ...USER_TYPE_SIGNED_IN_DOMAIN_PERMISSIONS};

	const USER_TYPE_ALL_RULES_STRING = '\n      let rules=' + JSON.stringify(COMPOSED_USER_TYPE_ALL_PERMISSIONS) + ';';
	const USER_TYPE_ANONYMOUS_RULES_STRING = '\n      let rules=' + JSON.stringify(COMPOSED_USER_TYPE_ANOYMOUS_PERMISSIONS) + ';';
	const USER_TYPE_SIGNED_IN_RULES_STRING = '\n      let rules=' + JSON.stringify(COMPOSED_USER_TYPE_SIGNED_IN_PERMISSIONS) + ';';
	const USER_TYPE_SIGNED_IN_DOMAIN_RULES_STRING = '\n      let rules=' + JSON.stringify(COMPOSED_USER_TYPE_SIGNED_IN_DOMAIN_PERMISSIONS) + ';';
	const USER_DOMAIN_RULES_STRING = '\n      let domain="' + USER_DOMAIN  + '";';

	let firestoreRules = fs.readFileSync('firestore.TEMPLATE.rules').toString();
	firestoreRules = firestoreRules.split('//inject here:all').join(USER_TYPE_ALL_RULES_STRING);
	firestoreRules = firestoreRules.split('//inject here:anonymous').join(USER_TYPE_ANONYMOUS_RULES_STRING);
	//signed_in_domain has to go before signed_in, otherwise signed_in will replace the signed_in_domain ones and leave extra.
	firestoreRules = firestoreRules.split('//inject here:signed_in_domain').join(USER_TYPE_SIGNED_IN_DOMAIN_RULES_STRING);
	firestoreRules = firestoreRules.split('//inject here:signed_in').join(USER_TYPE_SIGNED_IN_RULES_STRING);
	firestoreRules = firestoreRules.split('//inject here:domain').join(USER_DOMAIN_RULES_STRING);
	fs.writeFileSync('firestore.rules', firestoreRules);
};

(async() => {
	generateConfig();
})();